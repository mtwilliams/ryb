#!/usr/bin/env ruby
$:.push File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'rubygems'
require 'gli'
require 'docile'

require 'ryb'
# TODO(mtwilliams): Refactor into Ryb::CLI/Ryb::Runner.
# require 'ryb/cli'
require 'rybfile'

include GLI::App

# TODO(mtwilliams): Refactor this ugliness into lib/ryb.rb?
spec = Gem::Specification::load(File.expand_path(File.join(File.dirname(__FILE__), '..', 'ryb.gemspec')))
# program_name spec.name
version spec.version.to_s
program_desc spec.summary
program_long_desc spec.description

desc 'Generate project file(s)'
# TODO(mtwilliams): Improve command-specific help.
long_desc 'Generates project files for a specific toolset based on a Rybfile.'
command [:g, :gen, :generate] do |c|
  c.desc 'Automatically regenerate project file(s)'

  c.action do |global_opts, opts, args|
    # TODO(mtwilliams): Sanity checks on `args'.
    toolset = args.shift
    # TODO(mtwilliams): Custom exception types.
    raise "No toolset specified!" if toolset.nil?
    raise "Unknown toolset `#{toolset}'!" unless Ryb::Toolsets.available?(toolset)
    rybfile = args.shift || 'Rybfile'
    raise "No such file `#{rybfile}' exists!" unless File.exists?(rybfile)
    rybfile = Rybfile.load(rybfile)
    puts rybfile.inspect
    puts "Generating project file(s) for `#{toolset}'..."
    # ...
  end
end

exit run(ARGV)
